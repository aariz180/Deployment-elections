package com.election.electionsbackend.model.tags;

import com.fasterxml.jackson.annotation.JsonIdentityInfo;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import com.fasterxml.jackson.annotation.ObjectIdGenerators;
import jakarta.persistence.*;
import lombok.Getter;
import lombok.Setter;

import java.util.List;

/**
 * Tag entity representing a tag that can be associated with various entities such as forum posts,
 * parties, and news articles.
 * This class manages the properties and relationships of a tag in the system.
 */
@Entity
@Getter
@Setter
@Table(name = "tag")
@JsonIdentityInfo(generator = ObjectIdGenerators.PropertyGenerator.class, property = "id")
public class Tag {

    /**
     * The unique identifier for the tag.
     * It is automatically generated using the IDENTITY strategy.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    /**
     * The name of the tag.
     */
    private String name;

    /**
     * A description of the tag.
     */
    private String description;

    /**
     * The list of party tags associated with this tag.
     *
     * - Mapped by the `tag` property in the PartyTags entity.
     */
    @OneToMany(mappedBy = "tag")
    private List<PartyTags> partyTags;

    /**
     * The list of forum tags associated with this tag.
     *
     * - Mapped by the `tag` property in the ForumTags entity.
     * - Uses `@JsonManagedReference` to indicate that this is the "parent" side of the relationship,
     *   allowing for proper serialization.
     */
    @JsonManagedReference("forum-tags-tag")
    @OneToMany(mappedBy = "tag")
    private List<ForumTags> forumTags;

    /**
     * The list of news tags associated with this tag.
     *
     * - Mapped by the `tag` property in the NewsTags entity.
     */
    @OneToMany(mappedBy = "tag")
    private List<NewsTags> newsTags;

    // Getters and Setters are automatically generated by Lombok
}
